package com.test.git;

import java.io.File;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import java.util.concurrent.Callable;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.FutureTask;

import org.eclipse.jgit.api.Git;
import org.eclipse.jgit.lib.ObjectId;
import org.eclipse.jgit.lib.ObjectLoader;
import org.eclipse.jgit.lib.Ref;
import org.eclipse.jgit.lib.Repository;
import org.eclipse.jgit.revwalk.RevCommit;
import org.eclipse.jgit.revwalk.RevTree;
import org.eclipse.jgit.revwalk.RevWalk;
import org.eclipse.jgit.transport.UsernamePasswordCredentialsProvider;
import org.eclipse.jgit.treewalk.TreeWalk;

public class TestGit {

    public static List<String> branches = new ArrayList<>();

    public static void main(String[] arg) {
        String url = "https://github.com/channgli/test.git";
        String localPath = "/Users/qiangli3/b";
        String branchName = "master";
        String username = "chanwexngli";
        String password = "Lqty.34wewe2425";
        try {

            String cmd = "rm -rf " + localPath;
            Runtime.getRuntime().exec(cmd);

            //1. 克隆代码
            Git git = Git.cloneRepository()
                    .setURI(url).setBranch(branchName)
                    .setBare(true)
                    .setDirectory(new File(localPath))
                    .setCredentialsProvider(new UsernamePasswordCredentialsProvider(username, password))
                    .call();
            Repository repository = git.getRepository();
            processBranch(repository);
            String s = getContentWithFile(repository, git, "master", "pom.xml");
            System.out.println(s);
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    public static String getContentWithFile(Repository repository, final Git git, final String branchName, String fileName)
            throws Exception {

        RevWalk walk = new RevWalk(repository);
        Ref ref = repository.getRef(branchName);
        if (ref == null) {
            ref = repository.getRef("refs/remotes/origin/" + branchName);
        }
        //异步pull
        ExecutorService executor = Executors.newCachedThreadPool();
        FutureTask<Boolean> task = new FutureTask<Boolean>(new Callable<Boolean>() {
            @Override
            public Boolean call() throws Exception {
                return git.pull().call().isSuccessful();
            }
        });
        executor.execute(task);

        ObjectId objId = ref.getObjectId();
        RevCommit revCommit = walk.parseCommit(objId);
        RevTree revTree = revCommit.getTree();

        TreeWalk treeWalk = TreeWalk.forPath(repository, fileName, revTree);
        //文件名错误
        if (treeWalk == null) {
            return null;
        }

        ObjectId blobId = treeWalk.getObjectId(0);
        ObjectLoader loader = repository.open(blobId);
        byte[] bytes = loader.getBytes();
        if (bytes != null) {
            return new String(bytes);
        }
        return null;
    }

    public static void processBranch(Repository repository) throws IOException {

        Map<String, Ref> refMap = repository.getAllRefs();
        branches.clear();
        for (String key : refMap.keySet()) {
            if (key.contains("refs/remotes/origin/")) {
                branches.add(key.replace("refs/remotes/origin/", ""));
            }
        }
    }

    public List<String> getAllBranchName() throws IOException {
        return branches;
    }
}
